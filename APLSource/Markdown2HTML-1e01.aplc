:Class  Markdown2HTML
⍝ ## Overview
⍝ This class can be used to convert one to many Markdown files (extension ".md")
⍝ into HTML files, by default with the same name but ".html" as extension.\\
⍝ The class MarkAPL is used for the conversion. It is one of the most powerful
⍝ implementations of such a converter; for details see <https://github.com/aplteam/MarkAPL>\\
⍝ The Markdown2HTML class is designed for being used via a desginated Dyalog user command,
⍝ though it can also be used independently.
⍝
⍝ ## The workhorse: `ProcessFiles`
⍝ This function is designed to be called from a Dyalog user command.\\
⍝ It must be fed with a parameter space. This parameter space is then passed on to MarkAPL.
⍝
⍝ ## Parameters
⍝ The MarkAPL class comes with a set of suitable default parameters. That means you can create
⍝ an HTML document without further ado. However, when those defaults don't work for you then
⍝ you can change them. For details see <ftp://aplteam.com/APLTeam/MarkAPL.html#Parameters>.\\
⍝ The MarkAPL class allows you to embedd parameters within the Markdown document itself.
⍝ For details see
⍝ [MarkAPL's online documentation](ftp://aplteam.com/APLTeam/MarkAPL.html#Embedding-parameters-with).\\
⍝ If neither the defaults nor embedding parameters into the document are suitable for you then
⍝ you can specify a configuration file instead.
⍝ You can also mix the two methods; note that parameters within the document take precedence.\\
⍝ By calling `CreateParameterFile` you can create such a config file and then make the necessary
⍝ changes that suit your needs.
⍝
⍝ ## Requirements
⍝ This class requires Dyalog 15.0 Unicode or better.

    :Include ##.APLTreeUtils

    ⎕IO←1 ⋄ ⎕ML←3

    ∇ r←Version
      :Access Public Shared
      r←(Last⍕⎕THIS)'1.1.1' '2018-11-06'
    ∇

    ∇ r←History
      :Access Public Shared
      ⍝ * 1.1.1
      ⍝   * Bug in the user command script fixed that prevented Markdown2HTML to find CSS files.
      ⍝   * Method `History` added.
    ∇

    ∇ (success outputFilenames errMsgs)←{parms}ProcessFiles(filenames sourcePath targetPath);parms;bool;config
      :Access Shared Public
      ⍝ Takes one or more Markdown files and converts them into an HTML file.\\
      ⍝ Needs at least the `filenames` (with or without extension) and the `sourcePath`.\\
      ⍝ If `filename` has no extension ".md" is assumed.\\
      ⍝ `filename` must not have a path.\\
      ⍝ `targetPath` is optional: if empty it defaults to `sourcePath`.\\
      ⍝ Returns a three-item vector:
      ⍝ 1. Vector of Booleans; 1 indicating sucess, 0 = failure.
      ⍝ 2. Vector of target filenames.
      ⍝ 3. Vector of empty vectors or error messages.
      ⍝ See the "Help" command (defined in the user command script) for more
      ⍝ information on the switches.
      parms←{0<⎕NC ⍵:⍎⍵ ⋄ parms←##.MarkAPL.CreateParms}'parms'
      filenames←Nest filenames
      '"filenames" must be relative = no / allowed'⎕SIGNAL 11/⍨∨/¨'/\'∘∊¨filenames
      '`sourcePath` does not exist'⎕SIGNAL 11/⍨0=⎕NEXISTS sourcePath
      sourcePath←'expand'##.FilesAndDirs.NormalizePath sourcePath
      filenames←{'.'∊⍵:⍵ ⋄ ⍵,'.md'}¨filenames
      :If ∨/bool←~⎕NEXISTS¨(sourcePath,'/')∘,¨filenames
          11 ⎕SIGNAL⍨(⍕+/bool),' in "filenames" do not exist'
      :EndIf
      :If 0∊⍴targetPath
          :If ##.FilesAndDirs.IsFile sourcePath,'\.Markdown2HTML'
          :AndIf ~0∊⍴config←ReadUtf8File sourcePath,'\.Markdown2HTML'
              targetPath←sourcePath,'\',config
          :Else
              targetPath←sourcePath
          :EndIf
      :EndIf
      targetPath←'expand'##.FilesAndDirs.NormalizePath targetPath
      parms.verbose←1
      :If ⎕NULL≡parms.cssURL
          parms.cssURL←##.FilesAndDirs.PWD
      :EndIf
      (success outputFilenames errMsgs)←ProcessFiles_ filenames sourcePath targetPath parms
    ∇


    ∇ {filename}←CreateParameterFile filename;parms;json;bool;names
    ⍝ Creates a config file that is basically a JSON version of what `MarkAPL.CreateParms` creates.\\
    ⍝ You can specify a filename but if it's empty then a file in the TEMP directory is created.\\
    ⍝ The filename is returned as a shy argument.
      :Access Shared Public
      parms←##.MarkAPL.CreateParms
      filename←'.config'##.FilesAndDirs.GetTempFilename2⍣(0∊⍴filename)⊣filename
      :If ∨/bool←⎕NULL≡¨parms.∆List[;2]
          names←bool⌿parms.∆List[;1]
          parms{⍺⍎⍵,'←''[Null]'''}¨names
      :EndIf
      :If 15=↑(//)⎕VFI{⍵/⍨2>+\⍵='.'}2⊃'#'⎕WG'APLVersion'
          json←{(7160⌶)⍵}¨↓parms.∆List
      :Else
          json←{⎕JSON ⍵}¨↓parms.∆List
      :EndIf
      WriteUtf8File filename json
    ∇

    ∇ {errMsgs}←Convert ps;html;ns
    ⍝ Expects a parameter space `ps`, typically created by calling `MarkAPL.CreateParms`,
    ⍝ and uses this to convert the Markdown input file into an HTML file.\\
    ⍝ If the input file cannot be found an error is thrown.\\
    ⍝ Returns the html as result
      :Access Shared Public
      :If ⎕NEXISTS ps.inputFilename
          (html ns)←ps ##.MarkAPL.Markdown2HTML''
      :Else
          'File does not exist'⎕SIGNAL 6
      :EndIf
      errMsgs←ns.report
    ∇

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Private stuff

    ∇ {(success outputFilenames errMsgs)}←ProcessFiles_(filenames sourcePath targetPath parms);thisFile;parms_;buff
      success←outputFilenames←errMsgs←⍬
      :For thisFile :In filenames
          parms_←parms
          parms_.inputFilename←sourcePath,'/',thisFile
          parms_.outputFilename←targetPath,'/',({⍵↓⍨-(⌽⍵)⍳'.'}thisFile),'.html'
          :Trap 6
              errMsgs,←⊂Convert parms_
              buff←1 parms_.outputFilename
          :Else
              buff←⊂0 'Source file not found'
          :EndTrap
          success,←1⊃buff
          outputFilenames,←buff[2]
      :EndFor
    ∇

    ∇ value←{default}Switch(switches switchName);flag
    ⍝ Return modifier's value if specified and default otherwise if available or throw error.
      value←0                               ⍝ invalid modifiers are considered not there
      :Trap 3
          value←2⊃switches[switches[;0]⍳⊂,switchName;]
      :EndTrap
      :If 0≠⎕NC'default'                    ⍝ even undefined modifiers can be defaulted
          :If 0≡value
              value←default                 ⍝ use default if not set
          :ElseIf (1≢value)∧2|⎕DR,default   ⍝ num is 11, x3, 645, 1287, 1289
              (flag value)←⎕VFI value              ⍝ make numeric if default is also numeric
              ('value must be numeric ',switchName)⎕SIGNAL 11↓⍨∧/flag   ⍝ <if> unavailable
          :EndIf
      :EndIf
    ∇

:EndClass
